package com.pandapay.service.impl;

import java.sql.Timestamp;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.pandapay.dao.IUserDao;
import com.pandapay.entity.DO.UserDO;
import com.pandapay.entity.VO.UserBackVO;
import com.pandapay.service.IUserService;

/**
 * 用户信息
 * @author gql
 *
 */
@Service("userService")
public class UserServiceImpl implements IUserService{

	/** 用户信息 */
	@Autowired
	private IUserDao userDao;
	
	/**
	 * 新增用户信息
	 * @param user 用户信息
	 * @return 操作成功：返回true，失败：返回false
	 */
	public boolean insertUser(UserDO user){
		return userDao.insertUser(user);
	}
	
	/**
	 * 查询用户信息
	 * @param userId 用户Id
	 * @return 操作成功：返回用户信息，失败：返回null
	 */
	public UserDO queryUserByUserId(int userId){
		return userDao.queryUserByUserId(userId);
	}
	
	/**
	 * 查询用户信息
	 * @param userAccount 用户Id
	 * @return 操作成功：返回用户信息，失败：返回null
	 */
	public UserDO queryUserByUserAccount(String userAccount){
		return userDao.queryUserByUserAccount(userAccount);
	}
	
	/**
	 * 验证用户帐号是否已存在
	 * @param userAccount 用户帐号
	 * @return 已存在：返回true，不存在：返回false
	 */
	public boolean validataUserAccount(String userAccount){
		return userDao.validataUserAccount(userAccount);
	}
	
	/**
	 * 验证用户登录
	 * @param userAccount 用户账号
	 * @param passwrod 账号密码
	 * @return 操作成功：返回用户信息，失败：返回null
	 */
	public UserDO validateUserLogin(String userAccount, String passwrod){
		return userDao.validateUserLogin(userAccount, passwrod);
	}
	
	/**
	 * 增加钱包金额
	 * @param userId 用户Id
	 * @param addAmount 增加的钱包金额，单位：元
	 * @param remarks 备注
	 * @return 操作成功：返回true，失败：返回false
	 */
	public boolean addWalletAmount(int userId, double addAmount, String remarks){
		return userDao.addWalletAmount(userId, addAmount, remarks);
	}
	
	/**
	 * 减少钱包金额
	 * @param userId 用户Id
	 * @param reduceAmount 减少的钱包金额，单位：元
	 * @param remarks 备注
	 * @return 操作成功：返回true，失败：返回false
	 */
	public boolean reduceWalletAmount(int userId, double reduceAmount, String remarks){
		return userDao.reduceWalletAmount(userId, reduceAmount, remarks);
	}
	
	/**
	 * 增加红包金额
	 * @param userId 用户Id
	 * @param addAmount 增加的红包金额，单位：元
	 * @param remarks 备注
	 * @return 操作成功：返回true，失败：返回false
	 */
	public boolean addRedPacketAmount(int userId, double addAmount, String remarks){
		return userDao.addRedPacketAmount(userId, addAmount, remarks);
	}
	
	/**
	 * 减少红包金额
	 * @param userId 用户Id
	 * @param reduceAmount 减少的红包金额，单位：元
	 * @param remarks 备注
	 * @return 操作成功：返回true，失败：返回false
	 */
	public boolean reduceRedPacketAmount(int userId, double reduceAmount, String remarks){
		return userDao.reduceRedPacketAmount(userId, reduceAmount, remarks);
	}
	
	/**
	 * 修改用户密码
	 * @param userId 用户Id
	 * @param oldPassword 旧密码
	 * @param newPassword 新密码
	 * @return 操作成功：返回true，失败：返回false
	 */
	public boolean updateUserPassword(int userId, String oldPassword, String newPassword){
		return userDao.updateUserPassword(userId, oldPassword, newPassword);
	}
	
	/**
	 * 修改认证状态
	 * @param userId 用户Id
	 * @param authenStatus 认证状态，0：待认证，1：认证通过，2：认证失败
	 * @param updateTime 最后修改时间
	 * @return 操作成功：返回true，操作失败：返回false
	 */
	public boolean updateAuthenStatus(int userId, int authenStatus, Timestamp updateTime){
		return userDao.updateAuthenStatus(userId, authenStatus, updateTime);
	}
	
	/**
	 * 修改交易信息
	 * @param userId 用户Id
	 * @param singleLimitAmount 单笔限额，单位：元
	 * @param receiptRate 收款费率
	 * @param updateTime 最后修改时间
	 * @return 操作成功：返回true，操作失败：返回false
	 */
	public boolean updatePayInfo(int userId, double singleLimitAmount, double receiptRate, Timestamp updateTime){
		return userDao.updatePayInfo(userId, singleLimitAmount, receiptRate, updateTime);
	}
	
	/**
	 * 查询用户总数（后台操作）
	 * @param userAccount 用户帐号
	 * @param inviteUserAccount 邀请人账号
	 * @param idCard 身份证号
	 * @param bankCard 结算银行卡号
	 * @param authenStatus 认证状态，0：待认证，1：认证通过，2：认证失败，查询全部填-1
	 * @param startTime 注册时间的开始时间
	 * @param endTime 注册时间的结束时间
	 * @return 操作成功：返回用户总数，操作失败：返回0
	 */
	public int queryUserTotalOfBack(String userAccount, String inviteUserAccount, String idCard, String bankCard, int authenStatus,
			Timestamp startTime, Timestamp endTime){
		return userDao.queryUserTotalOfBack(userAccount, inviteUserAccount, idCard, bankCard, authenStatus, startTime, endTime);
	}
	
	/**
	 * 查询用户信息列表（后台操作）
	 * @param userAccount 用户帐号
	 * @param inviteUserAccount 邀请人账号
	 * @param idCard 身份证号
	 * @param bankCard 结算银行卡号
	 * @param authenStatus 认证状态，0：待认证，1：认证通过，2：认证失败，查询全部填-1
	 * @param startTime 注册时间的开始时间
	 * @param endTime 注册时间的结束时间
	 * @param pageNumber 当前页码
	 * @param pageSize 每页大小
	 * @return 操作成功：返回用户信息列表，操作失败：返回null
	 */
	public List<UserBackVO> queryUserListOfBack(String userAccount, String inviteUserAccount, String idCard, String bankCard, int authenStatus,
			Timestamp startTime, Timestamp endTime, int pageNumber, int pageSize){
		return userDao.queryUserListOfBack(userAccount, inviteUserAccount, idCard, bankCard, authenStatus,
				startTime, endTime, pageNumber, pageSize);
	}
	
}
